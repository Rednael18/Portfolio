import numpy as np
import matplotlib.pyplot as plt
from perlin_noise import PerlinNoise


def make_continent(zoom=0, type="blob"):
    """
    Generates a continent using Perlin noise.
    
    Keyword arguments:
    zoom -- the zoom level of the continent, with positive values zooming in and negative values zooming out (default 0)
    type -- the type of continent to generate, can be "blob", "rand", "horizontal", "vertical", "fuzzy" or "simple" (default "blob")

    Returns a list of 3 elements: X, Y and the continent matrix.
    """

     # Check that the type argument is valid
    valid_types = ["blob", "rand", "horizontal", "vertical", "fuzzy", "simple"]
    if type not in valid_types:
        raise ValueError(f"Invalid type '{type}'. Must be one of {valid_types}")
    
    # Check that the zoom argument is valid
    if not isinstance(zoom, int):
        raise TypeError(f"Zoom must be an integer. Got {type(zoom)} instead.")


    # Random factors for the continent shape
    facti = np.random.normal(1, 0.4)
    facty = 2 - facti


    # Generate the Perlin noise. Octaves found through trial and error.
    if type in ["rand", "blob", "horizontal", "vertical"]:
        octs = [2, 6, 12, 30]
    elif type=="fuzzy":
        octs = [5, 10, 14, 30]
    elif type=="simple":
        octs = [1, 3, 6, 12]
    elif type=="archipelago":
        octs = [4, 8, 10, 30]


    noise1 = PerlinNoise(octaves=octs[0])
    noise2 = PerlinNoise(octaves=octs[1])
    noise3 = PerlinNoise(octaves=octs[2])
    noise4 = PerlinNoise(octaves=octs[3])

    # Initialize the continent matrix
    N = 120
    x = np.linspace(-1 + zoom/4, 1 - zoom/4, N)
    y = np.linspace(-1 + zoom/4, 1 - zoom/4, N)
    X, Y = np.meshgrid(x, y)

    # Original refers to the circle layer, before the Perlin noise is added
    original = []

    # To ensure the continent has a central body, we add a circle layer to the matrix
    for i in x:
        row = []
        for j in y:
            if type == "rand":
                circval = np.sqrt(2) / 2
                circval -= np.sqrt((abs(facti * i)) ** 2 + (abs(facty * j)) ** 2)
            elif type == "horizontal":
                circval = np.sqrt(2)/2
                circval -= np.sqrt((abs(1.8 * i))**2 + (abs(j))**2)
            elif type == "vertical":
                circval = np.sqrt(2) / 2
                circval -= np.sqrt((abs(i)) ** 2 + (abs(1.8 * j)) ** 2)
            elif type == "archipelago":
                circval = -0.15
                circval -= np.sqrt((abs(i/2)) ** 2 + (abs(j/2)) ** 2)
            else:
                circval = np.sqrt(2)/2
                circval -= np.sqrt((abs(i))**2 + (abs(j))**2)
            row.append(circval)
        original.append(row)
    original = np.matrix(original)

    # Now the Perlin noise is added
    pic = []
    for i in x:
        row = []
        for j in y:
            if type == "archipelago": # Smaller noise dominates more for archipelagos
                noise_val = noise1([i, j])
                noise_val += 0.9 * noise2([i, j])
                noise_val += 0.55 * noise3([i, j])
                noise_val += 0.30 * noise4([i, j])
            else:
                noise_val = noise1([i, j])
                noise_val += 0.5 * noise2([i, j])
                noise_val += 0.25 * noise3([i, j])
                noise_val += 0.10 * noise4([i, j])

            row.append(noise_val)
        pic.append(row)

    pic = np.matrix(pic)

    res = pic + original
    return [X, Y, res]

def plot_continent(continent):
    """
    Plots a continent generated by make_continent().
    """
    X, Y, res = continent
    plt.contourf(X, Y, res, levels=[-1000, 0.0, 1000], alpha=1, cmap="gist_earth")
    plt.axis("equal")
    plt.show()

# Example usage
world = make_continent(type="rand")
plot_continent(world)